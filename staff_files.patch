diff --git a/SwEng2013QuizApp/src/epfl/sweng/servercomm/SwengHttpClientFactory.java b/SwEng2013QuizApp/src/epfl/sweng/servercomm/SwengHttpClientFactory.java
index db77f82..bd0df5d 100644
--- a/SwEng2013QuizApp/src/epfl/sweng/servercomm/SwengHttpClientFactory.java
+++ b/SwEng2013QuizApp/src/epfl/sweng/servercomm/SwengHttpClientFactory.java
@@ -1,109 +1,114 @@
-package epfl.sweng.servercomm;
-
-import java.net.URI;
-import java.util.ArrayList;
-import java.util.Date;
-import java.util.List;
-
-import org.apache.http.HttpRequest;
-import org.apache.http.HttpRequestInterceptor;
-import org.apache.http.HttpResponse;
-import org.apache.http.HttpResponseInterceptor;
-import org.apache.http.client.CookieStore;
-import org.apache.http.client.RedirectHandler;
-import org.apache.http.conn.scheme.PlainSocketFactory;
-import org.apache.http.conn.scheme.Scheme;
-import org.apache.http.conn.scheme.SchemeRegistry;
-import org.apache.http.conn.ssl.SSLSocketFactory;
-import org.apache.http.cookie.Cookie;
-import org.apache.http.impl.client.AbstractHttpClient;
-import org.apache.http.impl.client.DefaultHttpClient;
-import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;
-import org.apache.http.params.BasicHttpParams;
-import org.apache.http.params.HttpParams;
-import org.apache.http.protocol.HttpContext;
-
-import android.util.Log;
-
-/**
- * This factory creates HttpClients. It also allows to inject custom HttpClients for testing.
- */
-public class SwengHttpClientFactory {
-
-    final private static CookieStore COOKIE_MONSTER = new CookieStore() {
-        @Override
-        public void addCookie(Cookie cookie) {
-        }
-
-        @Override
-        public void clear() {
-        }
-
-        @Override
-        public boolean clearExpired(Date date) {
-            return true;
-        }
-
-        @Override
-        public List<Cookie> getCookies() {
-            return new ArrayList<Cookie>();
-        }
-    };
-    private static final int HTTP_PORT = 80;
-    private static AbstractHttpClient httpClient;
-
-    private final static int HTTPS_PORT = 443;
-
-    final private static HttpRequestInterceptor LOGGING_REQUEST_INTERCEPTOR = new HttpRequestInterceptor() {
-        @Override
-        public void process(HttpRequest request, HttpContext context) {
-            Log.d("HTTP REQUEST", request.getRequestLine().toString());
-        }
-    };
-
-    final private static HttpResponseInterceptor LOGGING_RESPONSE_INTERCEPTOR = new HttpResponseInterceptor() {
-        @Override
-        public void process(HttpResponse response, HttpContext context) {
-            Log.d("HTTP RESPONSE", response.getStatusLine().toString());
-        }
-    };
-
-    final private static RedirectHandler REDIRECT_NO_FOLLOW = new RedirectHandler() {
-        @Override
-        public URI getLocationURI(HttpResponse response, HttpContext context) throws org.apache.http.ProtocolException {
-            return null;
-        }
-
-        @Override
-        public boolean isRedirectRequested(HttpResponse response, HttpContext context) {
-            return false;
-        }
-    };
-
-    private static AbstractHttpClient create() {
-        SchemeRegistry schemeRegistry = new SchemeRegistry();
-        schemeRegistry.register(new Scheme("http", PlainSocketFactory.getSocketFactory(), HTTP_PORT));
-        schemeRegistry.register(new Scheme("https", SSLSocketFactory.getSocketFactory(), HTTPS_PORT));
-        HttpParams params = new BasicHttpParams();
-        ThreadSafeClientConnManager connManager = new ThreadSafeClientConnManager(params, schemeRegistry);
-        AbstractHttpClient result = new DefaultHttpClient(connManager, params);
-        result.setRedirectHandler(REDIRECT_NO_FOLLOW);
-        result.setCookieStore(COOKIE_MONSTER);
-        result.addRequestInterceptor(LOGGING_REQUEST_INTERCEPTOR);
-        result.addResponseInterceptor(LOGGING_RESPONSE_INTERCEPTOR);
-        return result;
-    }
-
-    public static synchronized AbstractHttpClient getInstance() {
-        if (httpClient == null) {
-            httpClient = create();
-        }
-
-        return httpClient;
-    }
-
-    public static synchronized void setInstance(AbstractHttpClient instance) {
-        httpClient = instance;
-    }
-
-}
+package epfl.sweng.servercomm;
+
+import java.net.URI;
+import java.util.ArrayList;
+import java.util.Date;
+import java.util.List;
+
+import org.apache.http.HttpRequest;
+import org.apache.http.HttpRequestInterceptor;
+import org.apache.http.HttpResponse;
+import org.apache.http.HttpResponseInterceptor;
+import org.apache.http.client.CookieStore;
+import org.apache.http.client.RedirectHandler;
+import org.apache.http.conn.scheme.PlainSocketFactory;
+import org.apache.http.conn.scheme.Scheme;
+import org.apache.http.conn.scheme.SchemeRegistry;
+import org.apache.http.conn.ssl.SSLSocketFactory;
+import org.apache.http.cookie.Cookie;
+import org.apache.http.impl.client.AbstractHttpClient;
+import org.apache.http.impl.client.DefaultHttpClient;
+import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;
+import org.apache.http.params.BasicHttpParams;
+import org.apache.http.params.HttpParams;
+import org.apache.http.protocol.HttpContext;
+
+import android.util.Log;
+
+/**
+ * This factory creates HttpClients. It also allows to inject custom HttpClients
+ * for testing.
+ *
+ * The tests used for grading SwEng projects have strong assumptions on the
+ * behavior of this class, so we advise you not to modify it.
+ */
+public class SwengHttpClientFactory {
+
+    private static AbstractHttpClient httpClient;
+    private static final int HTTP_PORT = 80;
+    private final static int HTTPS_PORT = 443;
+
+
+    public static synchronized AbstractHttpClient getInstance() {
+        if (httpClient == null) {
+            httpClient = create();
+        }
+
+        return httpClient;
+    }
+
+    public static synchronized void setInstance(AbstractHttpClient instance) {
+        httpClient = instance;
+    }
+
+    final private static RedirectHandler REDIRECT_NO_FOLLOW = new RedirectHandler() {
+        @Override
+        public boolean isRedirectRequested(HttpResponse response, HttpContext context) {
+            return false;
+        }
+
+        @Override
+        public URI getLocationURI(HttpResponse response, HttpContext context) throws org.apache.http.ProtocolException {
+            return null;
+        }
+    };
+
+    final private static CookieStore COOKIE_MONSTER = new CookieStore() {
+        @Override
+        public void addCookie(Cookie cookie) {
+        }
+
+        @Override
+        public void clear() {
+        }
+
+        @Override
+        public boolean clearExpired(Date date) {
+            return true;
+        }
+
+        @Override
+        public List<Cookie> getCookies() {
+            return new ArrayList<Cookie>();
+        }
+    };
+
+    final private static HttpRequestInterceptor LOGGING_REQUEST_INTERCEPTOR = new HttpRequestInterceptor() {
+        @Override
+        public void process(HttpRequest request, HttpContext context) {
+            Log.d("HTTP REQUEST", request.getRequestLine().toString());
+        }
+    };
+
+    final private static HttpResponseInterceptor LOGGING_RESPONSE_INTERCEPTOR = new HttpResponseInterceptor() {
+        @Override
+        public void process(HttpResponse response, HttpContext context) {
+            Log.d("HTTP RESPONSE", response.getStatusLine().toString());
+        }
+    };
+
+    private static AbstractHttpClient create() {
+        SchemeRegistry schemeRegistry = new SchemeRegistry();
+        schemeRegistry.register(new Scheme("http", PlainSocketFactory.getSocketFactory(), HTTP_PORT));
+        schemeRegistry.register(new Scheme("https", SSLSocketFactory.getSocketFactory(), HTTPS_PORT));
+        HttpParams params = new BasicHttpParams();
+        ThreadSafeClientConnManager connManager = new ThreadSafeClientConnManager(params, schemeRegistry);
+        AbstractHttpClient result = new DefaultHttpClient(connManager, params);
+        result.setRedirectHandler(REDIRECT_NO_FOLLOW);
+        result.setCookieStore(COOKIE_MONSTER);
+        result.addRequestInterceptor(LOGGING_REQUEST_INTERCEPTOR);
+        result.addResponseInterceptor(LOGGING_RESPONSE_INTERCEPTOR);
+        return result;
+    }
+
+}
diff --git a/SwEng2013QuizApp/src/epfl/sweng/testing/TestCoordinationError.java b/SwEng2013QuizApp/src/epfl/sweng/testing/TestCoordinationError.java
index 9868dfc..bd4a776 100644
--- a/SwEng2013QuizApp/src/epfl/sweng/testing/TestCoordinationError.java
+++ b/SwEng2013QuizApp/src/epfl/sweng/testing/TestCoordinationError.java
@@ -1,12 +1,13 @@
-package epfl.sweng.testing;
-
-/**
- * An exception that is thrown whenever the TestCoordinator detects an inconsistency.
- */
-public class TestCoordinationError extends AssertionError {
-    private static final long serialVersionUID = 1L;
-
-    public TestCoordinationError(String msg) {
-        super(msg);
-    }
-}
\ No newline at end of file
+package epfl.sweng.testing;
+
+/**
+ * An exception that is thrown whenever the TestCoordinator detects an
+ * inconsistency.
+ */
+public class TestCoordinationError extends AssertionError {
+    public TestCoordinationError(String msg) {
+        super(msg);
+    }
+
+    private static final long serialVersionUID = 1L;
+}
diff --git a/SwEng2013QuizApp/src/epfl/sweng/testing/TestCoordinator.java b/SwEng2013QuizApp/src/epfl/sweng/testing/TestCoordinator.java
index e29f76f..d28cc98 100644
--- a/SwEng2013QuizApp/src/epfl/sweng/testing/TestCoordinator.java
+++ b/SwEng2013QuizApp/src/epfl/sweng/testing/TestCoordinator.java
@@ -1,150 +1,173 @@
-package epfl.sweng.testing;
-
-import android.app.Instrumentation;
-import android.util.Log;
-
-/**
- * A coordinator to synchronize tests with an App's UI. This class provides a mechanism to signal to a test driver when
- * a request has finished processing. This allows the test driver to initiate a request (e.g., by clicking on a button)
- * and then wait until all processing has been done (e.g., network requests completed and the UI has been updated), and
- * then verify that the result is OK.
- * 
- * We require all SwEng projects to support TestingTransactions. This allows us to create reliable and quick blackbox
- * tests.
- * 
- * Usage:
- * 
- * In the test driver, call TestingTransactions.run(getInstrumentation(), new TestingTransaction() { // override the
- * initiate and verify methods, and probably toString });
- * 
- * In the student code, call TestingTransactions.check(TTChecks.THE_THING_I_JUST_DID) whenever a request is completely
- * done.
- * 
- * The grading tests make strong assumptions on the behavior of this class; you should not modify it.
- */
-public final class TestCoordinator {
-    /**
-     * The possible points at which transactions end. Each of these corresponds to some finished action.
-     */
-    public enum TTChecks {
-        ANSWER_SELECTED, AUTHENTICATION_ACTIVITY_SHOWN, AVAILABLE_QUIZZES_SHOWN, EDIT_QUESTIONS_SHOWN, LOGGED_OUT,
-        MAIN_ACTIVITY_SHOWN, NEW_QUESTION_SUBMITTED, NONE, QUESTION_EDITED, QUESTION_SHOWN, QUIZ_SCORE_SHOWN
-    }
-
-    /** The possible states of a transaction */
-    private enum TTState {
-        COMPLETED, IDLE, INITIATED
-    }
-
-    private static final TestCoordinator INSTANCE = new TestCoordinator();
-
-    /** The tag used for logging */
-    private static final String TAG = "TestingTransaction";
-
-    /** The maximum time we wait for a transaction to complete, in milliseconds */
-    private static final long TRANSACTION_TIMEOUT = 5500;;
-
-    // Notifies the waiting thread that the transaction has been completed and
-    // is ready to be verified
-    public static void check(TTChecks completedCheck) {
-        Log.d(TAG, String.format("TestingTransactions.check(%s)", completedCheck));
-        TestCoordinator tts = TestCoordinator.getInstance();
-        synchronized (tts) {
-            if (tts.state == TTState.IDLE) {
-                return; // Do nothing if we're not in testing mode
-            } else if (tts.state == TTState.INITIATED) {
-                tts.state = TTState.COMPLETED;
-                tts.currentCheck = completedCheck;
-                tts.notify();
-            } else {
-                throw new TestCoordinationError(String.format("Multiple calls to check: First was %s, then %s",
-                    tts.currentCheck, completedCheck));
-            }
-        }
-    }
-
-    // Retrieve the singleton instance of TestingTransaction
-    private static TestCoordinator getInstance() {
-        return INSTANCE;
-    };
-
-    // / Runs the given TestingTransaction
-    public static void run(Instrumentation instr, TestingTransaction t) {
-        TestCoordinator tts = TestCoordinator.getInstance();
-        TTChecks receivedCheck = null;
-
-        try {
-            // 1) initiate the transaction
-            synchronized (tts) {
-                if (tts.state != TTState.IDLE) {
-                    throw new TestCoordinationError("Attempt to run transaction '" + t
-                        + "', but another transaction is running.");
-                }
-                tts.startTime = System.currentTimeMillis();
-                Log.d(TAG, String.format("Starting transaction %s", t));
-
-                tts.state = TTState.INITIATED;
-            }
-
-            // We give up our lock while initiating the transaction. There are now
-            // two cases:
-            // 1) The transaction completes immediately. In that case, the state
-            // will be set to COMPLETED, and we'll never wait.
-            // 2) The transaction does not complete immediately. In that case, we'll
-            // call tts.wait() to wait for completion.
-            t.initiate();
-
-            synchronized (tts) {
-                // If the transaction is not initiated or completed, this
-                // probably means that another transaction was run
-                // simultaneously, and set the state back to IDLE.
-                if (tts.state != TTState.INITIATED && tts.state != TTState.COMPLETED) {
-                    throw new TestCoordinationError("Attempt to wait for transaction '" + t + "', but it was aborted.");
-                }
-
-                // 2) wait for the transaction to complete (i.e., to call check)
-                long currentTime = System.currentTimeMillis();
-                while (tts.state != TTState.COMPLETED && currentTime < tts.startTime + TRANSACTION_TIMEOUT) {
-                    try {
-                        Log.d(TAG, String.format("Waiting for transaction %s...", t));
-                        tts.wait(TRANSACTION_TIMEOUT - (currentTime - tts.startTime));
-                        Log.d(TAG, String.format("Waiting for transaction %s... done", t));
-                    } catch (InterruptedException e) {
-                        // Nothing...
-                    }
-                    currentTime = System.currentTimeMillis();
-                }
-
-                if (tts.state != TTState.COMPLETED) {
-                    throw new TestCoordinationError(String.format("Transaction %s timed out (elapsed: %d)", t,
-                        currentTime - tts.startTime));
-                }
-                receivedCheck = tts.currentCheck;
-            }
-
-            // 3) verify the result of the transaction
-            // Again, we give up our lock for this, because otherwise a deadlock
-            // can occur if the student code calls check() during the
-            // waitForIdleSync().
-            instr.waitForIdleSync();
-            t.verify(receivedCheck);
-            Log.d(TAG,
-                String.format("Completed transaction %s (elapsed: %d)", t, System.currentTimeMillis() - tts.startTime));
-        } finally {
-            synchronized (tts) {
-                tts.state = TTState.IDLE;
-            }
-        }
-    }
-
-    private TTChecks currentCheck = TTChecks.NONE;
-
-    /** The time when the current transaction was started */
-    private long startTime;
-
-    private TTState state = TTState.IDLE;
-
-    // Singleton private constructor
-    private TestCoordinator() {
-    }
-}
\ No newline at end of file
+package epfl.sweng.testing;
+
+import android.app.Instrumentation;
+import android.util.Log;
+
+/**
+ * A coordinator to synchronize tests with an App's UI. This class provides a
+ * mechanism to signal to a test driver when a request has finished processing.
+ * This allows the test driver to initiate a request (e.g., by clicking on a
+ * button) and then wait until all processing has been done (e.g., network
+ * requests completed and the UI has been updated), and then verify that the
+ * result is OK.
+ * 
+ * We require all SwEng projects to support TestingTransactions. This allows us
+ * to create reliable and quick blackbox tests.
+ *
+ * Usage:
+ *
+ * In the test driver, call TestingTransactions.run(getInstrumentation(), new
+ * TestingTransaction() { // override the initiate and verify methods, and
+ * probably toString });
+ *
+ * In the student code, call
+ * TestingTransactions.check(TTChecks.THE_THING_I_JUST_DID) whenever a request
+ * is completely done.
+ *
+ * The grading tests make strong assumptions on the behavior of this class; you
+ * should not modify it.
+ */
+public final class TestCoordinator {
+    private static final TestCoordinator INSTANCE = new TestCoordinator();
+
+    /** The tag used for logging */
+    private static final String TAG = "TestingTransaction";
+
+    /** The maximum time we wait for a transaction to complete, in milliseconds */
+    private static final long TRANSACTION_TIMEOUT = 20500;
+
+    /** The time when the current transaction was started */
+    private long startTime;
+
+    /** The possible states of a transaction */
+    private enum TTState {
+        IDLE, INITIATED, COMPLETED
+    };
+    private TTState state = TTState.IDLE;
+
+    /**
+     * The possible points at which transactions end. Each of these corresponds
+     * to some finished action.
+     */
+    public enum TTChecks {
+        NONE,
+        QUESTION_SHOWN,
+        ANSWER_SELECTED,
+        QUIZ_SCORE_SHOWN,
+        AVAILABLE_QUIZZES_SHOWN,
+        MAIN_ACTIVITY_SHOWN,
+        EDIT_QUESTIONS_SHOWN,
+        QUESTION_EDITED,
+        NEW_QUESTION_SUBMITTED,
+        AUTHENTICATION_ACTIVITY_SHOWN,
+        LOGGED_OUT,
+        OFFLINE_CHECKBOX_ENABLED,
+        OFFLINE_CHECKBOX_DISABLED
+    };
+
+    private TTChecks currentCheck = TTChecks.NONE;
+
+    // / Runs the given TestingTransaction
+    public static void run(Instrumentation instr, TestingTransaction t) {
+        TestCoordinator tts = TestCoordinator.getInstance();
+        TTChecks receivedCheck = null;
+
+        try {
+            // 1) initiate the transaction
+            synchronized (tts) {
+                if (tts.state != TTState.IDLE) {
+                    throw new TestCoordinationError(
+                            "Attempt to run transaction '" + t +
+                            "', but another transaction is running.");
+                }
+                tts.startTime = System.currentTimeMillis();
+                Log.d(TAG, String.format("Starting transaction %s", t));
+
+                tts.state = TTState.INITIATED;
+            }
+
+            // We give up our lock while initiating the transaction. There are now
+            // two cases:
+            // 1) The transaction completes immediately. In that case, the state
+            //    will be set to COMPLETED, and we'll never wait.
+            // 2) The transaction does not complete immediately. In that case, we'll
+            //    call tts.wait() to wait for completion.
+            t.initiate();
+
+            synchronized (tts) {
+                // If the transaction is not initiated or completed, this
+                // probably means that another transaction was run
+                // simultaneously, and set the state back to IDLE.
+                if (tts.state != TTState.INITIATED && tts.state != TTState.COMPLETED) {
+                    throw new TestCoordinationError(
+                            "Attempt to wait for transaction '" + t +
+                            "', but it was aborted.");
+                }
+
+                // 2) wait for the transaction to complete (i.e., to call check)
+                long currentTime = System.currentTimeMillis();
+                while (tts.state != TTState.COMPLETED
+                        && currentTime < tts.startTime + TRANSACTION_TIMEOUT) {
+                    try {
+                        Log.d(TAG, String.format("Waiting for transaction %s...", t));
+                        tts.wait(TRANSACTION_TIMEOUT - (currentTime - tts.startTime));
+                        Log.d(TAG, String.format("Waiting for transaction %s... done", t));
+                    } catch (InterruptedException e) {
+                        // Nothing...
+                    }
+                    currentTime = System.currentTimeMillis();
+                }
+
+                if (tts.state != TTState.COMPLETED) {
+                    throw new TestCoordinationError(String.format(
+                            "Transaction %s timed out (elapsed: %d)",
+                            t, currentTime - tts.startTime));
+                }
+                receivedCheck = tts.currentCheck;
+            }
+
+            // 3) verify the result of the transaction
+            // Again, we give up our lock for this, because otherwise a deadlock
+            // can occur if the student code calls check() during the
+            // waitForIdleSync().
+            instr.waitForIdleSync();
+            t.verify(receivedCheck);
+            Log.d(TAG, String.format(
+                    "Completed transaction %s (elapsed: %d)",
+                    t, System.currentTimeMillis() - tts.startTime));
+        } finally {
+            synchronized (tts) {
+                tts.state = TTState.IDLE;
+            }
+        }
+    }
+
+    // Notifies the waiting thread that the transaction has been completed and
+    // is ready to be verified
+    public static void check(TTChecks completedCheck) {
+        Log.d(TAG, String.format("TestingTransactions.check(%s)", completedCheck));
+        TestCoordinator tts = TestCoordinator.getInstance();
+        synchronized (tts) {
+            if (tts.state == TTState.IDLE) {
+                return; // Do nothing if we're not in testing mode
+            } else if (tts.state == TTState.INITIATED) {
+                tts.state = TTState.COMPLETED;
+                tts.currentCheck = completedCheck;
+                tts.notify();
+            } else {
+                throw new TestCoordinationError(String.format(
+                        "Multiple calls to check: First was %s, then %s",
+                        tts.currentCheck, completedCheck));
+            }
+        }
+    }
+
+    // Singleton private constructor
+    private TestCoordinator() {
+    }
+
+    // Retrieve the singleton instance of TestingTransaction
+    private static TestCoordinator getInstance() {
+        return INSTANCE;
+    }
+}
diff --git a/SwEng2013QuizApp/src/epfl/sweng/testing/TestingTransaction.java b/SwEng2013QuizApp/src/epfl/sweng/testing/TestingTransaction.java
index 4a6a77f..325499c 100644
--- a/SwEng2013QuizApp/src/epfl/sweng/testing/TestingTransaction.java
+++ b/SwEng2013QuizApp/src/epfl/sweng/testing/TestingTransaction.java
@@ -1,25 +1,27 @@
-package epfl.sweng.testing;
-
-/**
- * A TestingTransaction encapsulates a complete action that happens in a program. It is initiated, for example through a
- * click on a button. The action then causes some processing to happen, and ends when the state of the application has
- * been updated. Once the transaction completed, the resulting application state can be verified for consistency and
- * correctness.
- */
-public interface TestingTransaction {
-
-    /**
-     * Contains the code to initiate the transaction. For example, this might press a button on the user interface.
-     */
-    void initiate();
-
-    /**
-     * Contains the code to verify that a transaction succeeded. For example, this might check that the user
-     * interface
-     * has been updated correctly after a button has been pressed.
-     * 
-     * @param completedCheck
-     *            : The notification that was passed to check()
-     */
-    void verify(TestCoordinator.TTChecks completedCheck);
-}
\ No newline at end of file
+package epfl.sweng.testing;
+
+/**
+ * A TestingTransaction encapsulates a complete action that happens in a
+ * program. It is initiated, for example through a click on a button. The action
+ * then causes some processing to happen, and ends when the state of the
+ * application has been updated. Once the transaction completed, the resulting
+ * application state can be verified for consistency and correctness.
+ */
+public interface TestingTransaction {
+
+    /**
+     * Contains the code to initiate the transaction. For example, this might
+     * press a button on the user interface.
+     */
+    void initiate();
+
+    /**
+     * Contains the code to verify that a transaction succeeded. For example,
+     * this might check that the user interface has been updated correctly after
+     * a button has been pressed.
+     *
+     * @param completedCheck
+     *            : The notification that was passed to check()
+     */
+    void verify(TestCoordinator.TTChecks completedCheck);
+}
